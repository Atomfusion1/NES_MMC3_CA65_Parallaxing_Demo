SYMBOLS {
    __STACKSIZE__: type = weak, value = $0300; # 3 pages stack
}
# Full Config for MMC3 
MEMORY {
	# First 28 bytes of the zero page are used by NES library
    ZP: start = $10, size = $FD, type = rw, define = yes;

    # INES Cartridge Header
    HEADER: start = $0, size = $10, file = %O ,fill = yes;

	# 1 x 8K PRG RAM
	#PRGRAM: start = $6000, size = $2000, define = yes;

    # 8 X 8K PRG ROM
	PRGROM1:    start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRG0: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG1: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
    PRG2: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
	PRG3: start = $8000, size = $2000, file = %O, fill = yes, define = yes;
    PRGROM2:    start = $A000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGROM3:    start = $C000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGROM4:    start = $E000, size = $1FFA, file = %O ,fill = yes, define = yes;
	# Hardware Vectors at end of the ROM
	# NROM256
	VECTORS: start = $FFFA, size = $6, file = %O, fill = yes;

    # standard 2K SRAM (-zeropage)
    # $0100 famitone, palette, cpu stack
	# $0200 oam buffer
	# $0300..$800 ca65 stack

    RAM: start = $0300, size = $0500, define = yes;
    # ! 16 Banks of 8K CHR ROM
    CHR: start = $0000, size = $20000, file = %O, fill = yes;
}

SEGMENTS {
    HEADER:   load = HEADER,            type = ro;
    STARTUP:  load = PRGROM1,           type = ro,      define = yes;
    LOWCODE:  load = PRGROM2,           type = ro,                      optional = yes;
    INIT:     load = PRGROM2,           type = ro,      define = yes,   optional = yes;
    RODATA:   load = PRGROM2,           type = ro,      define = yes;
    CODE:     load = PRGROM3,           type = ro,      define = yes;
    DATA:     load = PRGROM4,           type = rw,      define = yes;
    VECTORS:  load = VECTORS,           type = rw;
    # PRG ROM
    BANK0:    load = PRG0,           type = ro, define = yes;
	BANK1:    load = PRG1,           type = ro, define = yes;
    BANK2:    load = PRG2,           type = ro, define = yes;
	BANK3:    load = PRG3,           type = ro, define = yes;


    # Swapable 128 kb stay out of the first two 16k as they are above 
    CHARS:    load = CHR,            type = rw;


    BSS:      load = RAM,            type = bss,     define = yes;
    HEAP:     load = RAM,            type = bss,     optional = yes;
    ZEROPAGE: load = ZP,                type = zp;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}