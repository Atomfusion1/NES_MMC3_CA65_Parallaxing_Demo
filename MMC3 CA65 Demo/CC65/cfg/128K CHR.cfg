.segment "HEADER"

#NES_MAPPER = 04                        ; 0 = NROM
#; I have the Code in the HelloNES.asm Blocked off if you enable it you can switch between the 8k CHR chunks
#NES_MIRROR = 1                         ; 0 = horizontal mirroring, 1 = vertical mirroring
#NES_SRAM   = 0                         ; 1 = battery backed SRAM at $6000-7FFF
#
#.byte 'N', 'E', 'S', $1A                ; ID
#.byte $02                               ; 16k PRG chunk count
#.byte $0F                               ; 16 x 8k CHR chunk count
#.byte NES_MIRROR | (NES_SRAM << 1) | ((NES_MAPPER & $f) << 4)
#.byte (NES_MAPPER & %11110000)
#.byte $0, $0, $0, $0, $0, $0, $0, $0    ; padding



SYMBOLS {
    __STACKSIZE__: type = weak, value = $0300; # 3 pages stack
}
# Full Config for MMC3 
MEMORY {
	# First 28 bytes of the zero page are used by NES library
    ZP: start = $10, size = $FD, type = rw, define = yes;

    # INES Cartridge Header
    HEADER: start = $0, size = $10, file = %O ,fill = yes;

	# Use this definition instead if you going to use extra 8K RAM
	PRGRAM: start = $6000, size = $2000, define = yes;

    # 2 16K ROM Banks
    # - startup
    # - code
    # - rodata
    # - data (load)
	# NROM256
	PRGROM1:    start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGROM2:    start = $A000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGROM3:    start = $C000, size = $2000, file = %O ,fill = yes, define = yes;
    PRGROM4:    start = $E000, size = $1FFA, file = %O ,fill = yes, define = yes;
	# Hardware Vectors at end of the ROM
	# NROM256
	VECTORS: start = $FFFA, size = $6, file = %O, fill = yes;

    # MMC3 2 - 2K 4 - 1K 
    PPUCHR1: start = $0000, size = $0800, file = %O, fill = yes;
    PPUCHR2: start = $0000, size = $0800, file = %O, fill = yes;
    PPUCHR3: start = $0800, size = $0800, file = %O, fill = yes;
    PPUCHR4: start = $0800, size = $0800, file = %O, fill = yes;
    PPUCHR5: start = $1000, size = $0400, file = %O, fill = yes;
    PPUCHR6: start = $1000, size = $0400, file = %O, fill = yes;
    PPUCHR7: start = $1400, size = $0400, file = %O, fill = yes;
    PPUCHR8: start = $1400, size = $0400, file = %O, fill = yes;
    PPUCHR9: start = $1800, size = $0400, file = %O, fill = yes;
    PPUCHRA: start = $1800, size = $0400, file = %O, fill = yes;
    PPUCHRB: start = $1C00, size = $0400, file = %O, fill = yes;
    PPUCHRC: start = $1C00, size = $0400, file = %O, fill = yes;

    # standard 2K SRAM (-zeropage)
    # $0100 famitone, palette, cpu stack
	# $0200 oam buffer
	# $0300..$800 ca65 stack

    #RAM: start = $0300, size = $0500, define = yes;
    # ! 16 Banks of 8K CHR ROM
    CHR: start = $0000, size = $20000, file = %O, fill = yes;
}

SEGMENTS {
    HEADER:   load = HEADER,            type = ro;
    STARTUP:  load = PRGROM1,           type = ro,      define = yes;
    LOWCODE:  load = PRGROM2,           type = ro,                      optional = yes;
    INIT:     load = PRGROM3,           type = ro,      define = yes,   optional = yes;
    CODE:     load = PRGROM4,           type = ro,      define = yes;
    RODATA:   load = PRGROM3,            type = ro,     define = yes;
    DATA:     load = PRGROM4, run = PRGRAM, type = rw,  define = yes;
    VECTORS:  load = VECTORS,           type = rw;

	CHARS2k1: load = PPUCHR1,          type = ro;
    CHARS2k2: load = PPUCHR2,          type = ro;
    CHARS2k3: load = PPUCHR3,          type = ro;
    CHARS2k4: load = PPUCHR4,          type = ro;
    CHARS1k1: load = PPUCHR5,          type = ro;
    CHARS1k2: load = PPUCHR6,          type = ro;
    CHARS1k3: load = PPUCHR7,          type = ro;
    CHARS1k4: load = PPUCHR8,          type = ro;
    CHARS1k5: load = PPUCHR9,          type = ro;
    CHARS1k6: load = PPUCHRA,          type = ro;
    CHARS1k7: load = PPUCHRB,          type = ro;
    CHARS1k8: load = PPUCHRC,          type = ro;

    CHARS:    load = CHR,            type = rw;


    BSS:      load = PRGRAM,            type = bss,     define = yes;
    HEAP:     load = PRGRAM,            type = bss,     optional = yes;
    ZEROPAGE: load = ZP,                type = zp;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}